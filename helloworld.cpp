#include <windows.h>
#include <iostream>
#include <math.h>

void MoveMouseRelative(int dx, int dy)
{
    INPUT input = {0};
    input.type = INPUT_MOUSE;
    input.mi.dx = dx;
    input.mi.dy = dy;
    input.mi.dwFlags = MOUSEEVENTF_MOVE;
    SendInput(1, &input, sizeof(INPUT));
}

// Example macro pattern (a few vertical steps)
const int FcarPattern[][2] = {
{0, 2},
{0, 2},
{0, 2},
{0, 2},
{0, 2},
{0, 2},
{1, 3},
{2, 3},
{1, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 4},
{0, 4},
{0, 4},
{0, 5},
{0, 6},
{0, 6},
{0, 6},
{0, 6},
{-1, 6},
{-1, 6},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-2, 5},
{-1, 5},
{-2, 5},
{-1, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 5},
{-2, 4},
{-2, 4},
{-2, 4},
{-2, 4},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 2},
{0, 3},
{0, 3},
{0, 2},
{0, 3},
{0, 2},
{0, 2},
{0, 2},
{0, 3},
{0, 2},
{0, 3},
{0, 2},
{-1, 3},
{0, 2},
{0, 2},
{-1, 3},
{0, 2},
{0, 3},
{0, 3},
{-1, 2},
{0, 1},
{0, 1},
{0, 1},
{-1, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{-1, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{-1, 1},
{0, 1},
{0, 0},
{0, 1},
{-1, 0},
{0, 1},
{0, 1},
{-1, 1},
{0, 0},
{0, 1},
{0, 1},
{-1, 0},
{0, 1},
{0, 1},
{0, 0},
{-1, 1},
{0, 1},
{-1, 0},
{-1, 1},
{0, 0},
{0, 1},
{-1, 0},
{0, 1},
{-1, 1},
{0, 1},
{-1, 1},
{0, 0},
{-1, 1},
{0, 1},
{0, 0},
{0, 1},
{-1, 1},
{-1, 1},
{0, 0},
{0, 1},
{-1, 1},
{-1, 0},
{0, 1},
{0, 0},
{-1, 1},
{0, 1},
{-1, 0},
{0, 1},
{-1, 1},
{0, 1},
{-1, 0},
{-1, 1},
{-1, 1},
{-1, 0},
{-1, 1},
{0, 0},
{-1, 1},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},

};

const int LewisGunPattern[][2] = {
{0, 1},
{0, 1},
{0, 1},
{0, 2},
{1, 2},
{1, 2},
{1, 3},
{1, 4},
{0, 4},
{0, 3},
{0, 4},
{0, 4},
{0, 3},
{1, 4},
{1, 4},
{1, 4},
{1, 3},
{1, 4},
{1, 4},
{0, 4},
{0, 3},
{1, 4},
{0, 3},
{1, 4},
{1, 4},
{1, 3},
{1, 4},
{0, 4},
{0, 3},
{0, 4},
{0, 4},
{0, 4},
{0, 5},
{0, 4},
{0, 4},
{1, 4},
{1, 4},
{0, 5},
{0, 4},
{1, 5},
{0, 4},
{0, 4},
{0, 4},
{0, 5},
{0, 4},
{1, 4},
{1, 5},
{0, 4},
{0, 5},
{0, 4},
{1, 4},
{0, 4},
{1, 5},
{0, 4},
{1, 4},
{1, 3},
{-1, 4},
{-1, 3},
{-1, 4},
{-1, 4},
{-2, 3},
{-2, 3},
{-2, 4},
{-3, 3},
{-4, 4},
{-4, 3},
{-3, 4},
{-3, 4},
{-2, 4},
{-2, 4},
{-2, 4},
{-2, 4},
{-2, 4},
{-2, 3},
{-2, 4},
{-1, 4},
{0, 3},
{-1, 3},
{-1, 4},
{0, 4},
{-1, 3},
{-1, 3},
{0, 4},
{-1, 3},
{-1, 4},
{0, 4},
{0, 3},
{-1, 3},
{-1, 4},
{0, 4},
{0, 4},
{-1, 3},
{0, 4},
{-1, 3},
{0, 4},
{-1, 3},
{0, 4},
{-1, 3},
{0, 4},
{0, 4},
{0, 2},
{0, 3},
{0, 2},
{0, 2},
{1, 1},
{1, 1},
{1, 1},
{2, 1},
{2, 1},
{2, 2},
{2, 2},
{1, 1},
{1, 1},
{2, 1},
{2, 1},
{2, 2},
{1, 2},
{1, 2},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 2},
{2, 1},
{2, 2},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 2},
{2, 2},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{1, 2},
{1, 2},
{0, 1},
{-1, 2},
{-1, 2},
{0, 1},
{-1, 1},
{0, 1},
{-1, 1},
{0, 1},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 1},
{-2, 2},
{-2, 1},
{-1, 1},
{-2, 1},
{-1, 1},
{-1, 1},
{-2, 2},
{-2, 2},
{-2, 1},
{-1, 1},
{-2, 2},
{-1, 2},
{-2, 1},
{-2, 2},
{-2, 2},
{-1, 2},
{-1, 2},
{0, 1},
{0, 1},
{-1, 2},
{-1, 2},
{0, 1},
{-1, 2},
{0, 1},
{0, 2},
{-1, 2},
{-1, 2},
{0, 2},
{-1, 1},
{-1, 2},
{-1, 2},
{-1, 1},
{-2, 2},
{-2, 2},
{-1, 1},
{-2, 2},
{-1, 1},
{-2, 2},
{-2, 2},
{-1, 1},
{-2, 2},
{-1, 1},
{-2, 2},
{-2, 2},
{-2, 2},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-2, 1},
{-2, 1},
{-1, 1},
{-1, 1},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 0},
{2, 0},
{2, 0},
{2, 0},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{2, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 2},
{0, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 2},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
{1, 0},
};

const int M60Pattern[][2] = {
{0, 8},
{1, 8},
{0, 7},
{0, 6},
{0, 6},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 6},
{0, 5},
{0, 6},
{0, 6},
{0, 6},
{0, 7},
{0, 7},
{0, 8},
{0, 8},
{0, 8},
{0, 8},
{0, 8},
{0, 8},
{0, 7},
{0, 7},
{0, 6},
{1, 5},
{1, 4},
{0, 4},
{0, 4},
{1, 4},
{0, 4},
{0, 4},
{0, 4},
{0, 4},
{1, 4},
{1, 4},
{1, 4},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 1},
{-1, 1},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 1},
{-1, 2},
{-1, 2},
{-1, 1},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 2},
{-1, 1},
{-1, 2},
{-1, 1},
{-1, 2},
{-1, 2},
{0, 2},
{0, 2},
{-1, 1},
{-1, 2},
{0, 2},
{0, 2},
{-1, 1},
{-1, 2},
{-1, 2},
{-1, 2},
{0, 1},
{1, 2},
{1, 1},
{1, 2},
{0, 2},
{0, 1},
{0, 2},
{1, 2},
{1, 2},
{1, 1},
{1, 2},
{1, 2},
{0, 1},
{0, 2},
{0, 2},
{0, 2},
{1, 2},
{1, 1},
{1, 2},
{1, 1},
{1, 2},
{1, 1},
{1, 2},
{1, 2},
{0, 2},
{0, 1},
{0, 2},
{0, 2},
{1, 1},
{1, 2},
{1, 2},
{1, 2},
{1, 2},
{1, 1},
{1, 2},
{1, 1},
{1, 1},
{1, 1},
{1, 2},
{1, 1},
{1, 2},
{1, 2},
{1, 2},
{1, 1},
{2, 1},
{2, 2},
{1, 1},
{1, 2},
{2, 1},
{1, 2},
{1, 1},
{1, 2},
{1, 1},
{0, 1},
{0, 2},
{0, 2},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{0, 1},
{-1, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{-1, 0},
{-1, 0},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{-1, 0},
{0, 0},
{0, 1},
{-1, 0},
{0, 0},
{0, 0},
{-1, 0},
{0, 1},
{0, 0},
{0, 1},
{-1, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{-1, 0},
{0, 0},
{-1, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{-1, 0},
{0, 1},
{0, 1},
{0, 1},
{-1, 0},
{0, 1},
{0, 0},
{-1, 1},
{0, 0},
{0, 1},
{0, 1},
{-1, 0},
{0, 1},
{0, 0},
{0, 1},
{-1, 0},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{1, 1},
{1, 1},
{0, 1},
{0, 1},
{0, 0},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 1},
{1, 0},
{1, 0},
{1, 0},
{1, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{1, 1},
{1, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 0},
{0, 1},
{0, 0},
{1, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{0, 1},
{1, 0},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{-1, 1},
{0, 1},
{0, 1},
{-1, 1},
{-1, 1},
{0, 0},
{0, 1},
{-1, 1},
{0, 1},
{0, 1},
{-1, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{-1, 1},
{0, 1},
{0, 0},
{0, 1},
{-1, 1},
{0, 1},
{0, 1},
{-1, 1},
{-1, 1},
{-1, 0},
{0, 1},
{0, 1},
{-1, 1},
{-1, 1},
{0, 1},
{0, 1},
{0, 0},
{-1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 0},
{1, 0},
{0, 0},
{1, 0},
{0, 1},
{1, 0},
{0, 1},
{1, 1},
{0, 0},
{0, 1},
{1, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{-1, 1},
{0, 0},
{0, 0},
{0, 0},
{0, 1},
{-1, 1},
{0, 0},
{-1, 1},
{0, 1},
{0, 0},
{0, 0},
{-1, 1},
{0, 1},
{0, 0},
{0, 1},
{-1, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{-1, 1},
{-1, 1},
{0, 0},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{-1, 1},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 1},
{1, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{1, 1},
{1, 1},
{0, 0},
{0, 1},
{1, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
};

const int XP_54Pattern[][2] = {
    {-1, 7},
{-1, 7},
{-1, 6},
{-1, 6},
{-1, 6},
{-1, 6},
{0, 5},
{-1, 6},
{-1, 5},
{0, 5},
{0, 5},
{-1, 6},
{0, 5},
{-1, 6},
{0, 5},
{-1, 6},
{0, 5},
{-1, 5},
{0, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 6},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 6},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 6},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 6},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 4},
{-1, 4},
{-1, 3},
{-1, 3},
{-1, 2},
{-1, 2},
{-1, 1},
{-1, 2},
{0, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 0},
{0, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 0},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 0},
{0, 1},
{-1, 1},
{0, 0},
{-1, 1},
{0, 1},
{-1, 1},
{-1, 1},
{0, 0},
{-1, 1},
{0, 0},
{-1, 0},
{-1, 1},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{-1, 0},
{0, 0},
{-1, 0},
{-1, 0},
{0, 1},
{-1, 0},
{-1, 0},
{0, 1},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{-1, 0},
{0, 0},
{-1, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{-1, 0},
{0, 0},
{-1, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{-1, 0},
{-1, 0},
{0, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{-1, 0},
{0, 0},
{0, 0},
{0, 1},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
};

const int ARN_22Pattern[][2] = {
    {0, 3},
{0, 3},
{0, 3},
{0, 4},
{0, 4},
{0, 4},
{1, 5},
{1, 4},
{1, 4},
{0, 4},
{1, 5},
{0, 4},
{1, 4},
{0, 4},
{0, 5},
{1, 4},
{1, 5},
{0, 4},
{0, 4},
{0, 5},
{1, 4},
{1, 4},
{1, 4},
{1, 5},
{0, 4},
{0, 4},
{0, 4},
{0, 5},
{1, 4},
{1, 4},
{1, 5},
{0, 4},
{0, 4},
{1, 5},
{0, 4},
{0, 4},
{1, 5},
{1, 4},
{1, 4},
{1, 4},
{1, 5},
{0, 4},
{0, 4},
{0, 4},
{1, 4},
{1, 5},
{1, 4},
{0, 4},
{0, 5},
{1, 4},
{0, 4},
{0, 5},
{0, 4},
{1, 5},
{0, 4},
{0, 5},
{0, 4},
{0, 4},
{0, 5},
{1, 5},
{0, 4},
{0, 4},
{0, 5},
{0, 4},
{0, 5},
{0, 5},
{0, 4},
{0, 4},
{-1, 5},
{-1, 4},
{-1, 4},
{-1, 5},
{0, 4},
{-1, 5},
{0, 5},
{-1, 4},
{0, 5},
{0, 4},
{-1, 4},
{0, 5},
{-1, 4},
{0, 5},
{0, 4},
{-1, 4},
{0, 5},
{-1, 5},
{0, 4},
{0, 5},
{-1, 4},
{0, 5},
{0, 5},
{-1, 4},
{0, 5},
{-1, 4},
{0, 4},
{0, 5},
{-1, 5},
{0, 5},
{-1, 4},
{0, 5},
{-1, 5},
{0, 4},
{0, 5},
{-1, 5},
{0, 4},
{-1, 4},
{0, 5},
{0, 4},
{-1, 4},
{0, 4},
{0, 4},
{0, 5},
{-1, 4},
{0, 4},
{0, 4},
{0, 3},
{0, 4},
{0, 3},
{0, 4},
{0, 4},
{0, 3},
{0, 3},
{0, 4},
{0, 4},
{0, 3},
{0, 4},
{0, 3},
{0, 4},
{0, 4},
{0, 3},
{0, 3},
{0, 4},
{0, 4},
{0, 0},
{0, 0},
{0, 0},

};

const int AK47Pattern[][2] = {
    {2, 4},
{2, 4},
{2, 4},
{1, 4},
{1, 5},
{1, 5},
{1, 5},
{1, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{-1, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 3},
{0, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-2, 3},
{-2, 3},
{-2, 3},
{-2, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-2, 3},
{-2, 3},
{-2, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-2, 3},
{-2, 3},
{-2, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{-1, 3},
{0, 2},
{0, 2},
{0, 2},
{1, 3},
{0, 3},
{1, 2},
{0, 3},
{1, 3},
{0, 2},
{1, 3},
{0, 3},
{1, 3},
{1, 2},
{1, 2},
{0, 2},
{0, 2},
{1, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 2},
{1, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 2},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 2},
{1, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 2},
{1, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 1},
{0, 2},
{1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 2},
{1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 2},
{0, 1},
{1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 2},
{1, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 2},
{0, 1},
{1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{1, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{1, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{1, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
};

const int SHAK_50Pattern[][2] = {
{0, 4},
{0, 4},
{0, 3},
{0, 4},
{0, 3},
{0, 4},
{0, 4},
{0, 3},
{-1, 4},
{0, 4},
{-1, 3},
{0, 3},
{-1, 3},
{0, 4},
{0, 3},
{-1, 3},
{0, 4},
{-1, 3},
{0, 3},
{0, 4},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 2},
{0, 3},
{0, 3},
{0, 3},
{0, 2},
{0, 3},
{0, 2},
{0, 3},
{0, 3},
{0, 3},
{0, 2},
{0, 2},
{0, 3},
{0, 3},
{0, 2},
{1, 2},
{1, 2},
{1, 3},
{2, 2},
{2, 3},
{2, 2},
{1, 2},
{1, 3},
{1, 2},
{0, 3},
{0, 2},
{0, 3},
{0, 2},
{0, 3},
{0, 2},
{0, 3},
{0, 2},
{0, 3},
{0, 2},
{-1, 2},
{-1, 2},
{-2, 3},
{-3, 3},
{-3, 2},
{-2, 3},
{-2, 2},
{-1, 2},
{-1, 2},
{0, 2},
{0, 3},
{0, 3},
{0, 2},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 3},
{0, 4},
{0, 3},
{0, 3},
{0, 3},
{0, 4},
{0, 3},
{0, 3},
{0, 4},
{0, 3},
{0, 3},
{0, 4},
{0, 4},
{0, 3},
{0, 3},
{0, 3},
{0, 4},
{0, 3},
{0, 3},
{0, 4},
{0, 3},
{0, 4},
{0, 3},
{0, 3},
{0, 4},
{0, 4},
{0, 3},

};

const int M11Pattern[][2] = {
{0, 3},
{0, 4},
{0, 4},
{0, 5},
{0, 5},
{0, 6},
{1, 5},
{1, 5},
{1, 6},
{1, 5},
{1, 4},
{1, 4},
{1, 5},
{2, 5},
{2, 4},
{2, 5},
{2, 5},
{1, 5},
{1, 6},
{1, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 5},
{0, 4},
{0, 3},
{0, 2},
{0, 2},
{0, 1},
{0, 2},
{0, 1},
{0, 2},
{0, 1},
{0, 1},
{-3, 2},
{-3, 2},
{-3, 1},
{-3, 2},
{-3, 2},
{-3, 1},
{-3, 2},
{-3, 2},
{-3, 2},
{-3, 1},
{-3, 2},
{-2, 2},
{-2, 2},
{-1, 1},
{0, 1},
{0, 2},
{1, 2},
{0, 1},
{0, 2},
{1, 2},
{0, 1},
{0, 2},
{1, 2},
{2, 2},
{3, 1},
{3, 1},
{3, 1},
{4, 1},
{4, 1},
{4, 2},
{3, 1},
{3, 2},
{3, 1},
{3, 1},
{3, 1},
{3, 1},
{2, 1},
{2, 1},
{1, 1},
{0, 2},
{1, 2},
{0, 1},
{0, 1},
{1, 1},
{0, 1},
{0, 2},
{0, 1},
{0, 1},
{0, 1},
{-1, 1},
{-2, 1},
{-2, 1},
{-3, 2},
{-3, 1},
{-3, 1},
{-3, 2},
{-3, 1},
{-4, 1},
{-4, 1},
{-3, 1},
{-3, 1},
{-3, 1},
{-3, 1},
{-3, 1},
{-2, 1},
{-1, 1},
{-1, 1},
{-1, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 1},
{1, 1},
{0, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{1, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 1},
{1, 1},
{1, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{1, 1},
{1, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 1},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},
{0, 0},

};





struct MousePattern {
    const char* name;
    const int (*pattern)[2];
    int length;
    int delay;
};

// Declare your pattern arrays (example placeholders)
extern const int AK47Pattern[][2], LewisGunPattern[][2], FcarPattern[][2], 
                 M60Pattern[][2], XP_54Pattern[][2], ARN_22Pattern[][2], 
                 SHAK_50Pattern[][2], M11Pattern[][2];

const MousePattern patterns[] = {
    { "AK47", AK47Pattern, sizeof(AK47Pattern) / sizeof(AK47Pattern[0]), 17 },//0
    { "LewisGun", LewisGunPattern, sizeof(LewisGunPattern) / sizeof(LewisGunPattern[0]), 17 },//1
    { "Fcar", FcarPattern, sizeof(FcarPattern) / sizeof(FcarPattern[0]), 18 },//2
    { "M60", M60Pattern, sizeof(M60Pattern) / sizeof(M60Pattern[0]), 17 },//3
    { "XP_54", XP_54Pattern, sizeof(XP_54Pattern) / sizeof(XP_54Pattern[0]), 17 },//4
    { "ARN_22", ARN_22Pattern, sizeof(ARN_22Pattern) / sizeof(ARN_22Pattern[0]), 18 },//5
    { "SHAK_50", SHAK_50Pattern, sizeof(SHAK_50Pattern) / sizeof(SHAK_50Pattern[0]), 17 },//6
    { "M11", M11Pattern, sizeof(M11Pattern) / sizeof(M11Pattern[0]), 17 }//7
};

// Adjust this for your mouse sensitivity
const double SENSITIVITY_SCALE = 52.0 / 84.0;

double leftoverX = 0.0, leftoverY = 0.0;

void MoveMouseRelativeFractional(double dx, double dy) {
    dx += leftoverX;
    dy += leftoverY;

    int moveX = static_cast<int>(floor(dx));
    int moveY = static_cast<int>(floor(dy));

    leftoverX = dx - moveX;
    leftoverY = dy - moveY;

    if (moveX != 0 || moveY != 0) {
        INPUT input = {0};
        input.type = INPUT_MOUSE;
        input.mi.dx = moveX;
        input.mi.dy = moveY;
        input.mi.dwFlags = MOUSEEVENTF_MOVE;
        SendInput(1, &input, sizeof(INPUT));
    }
}

int main() {
    std::cout << "Running...\n";
    std::cout << "➡️ Hold LEFT mouse button to run macro pattern\n\n";

    // Choose pattern dynamically (change index to select different weapon)
    int selectedPatternIndex = 2; // AK47
    const MousePattern& activePattern = patterns[selectedPatternIndex];

    std::cout << "Active pattern: " << activePattern.name << "\n";

    while (true) {
        if (GetAsyncKeyState(VK_LBUTTON) & 0x8000) {
            for (int i = 0; i < activePattern.length; ++i) {
                if (!(GetAsyncKeyState(VK_LBUTTON) & 0x8000))
                    break;

                MoveMouseRelativeFractional(
                    activePattern.pattern[i][0] * SENSITIVITY_SCALE,
                    activePattern.pattern[i][1] * SENSITIVITY_SCALE
                );

                Sleep(activePattern.delay);
            }
        }

        Sleep(1); // Reduce CPU usage
    }

    return 0;
}
