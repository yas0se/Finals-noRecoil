#include <windows.h>
#include <iostream>
#include <math.h>
#include <commctrl.h>
#include <thread>
#include <string>
#include <cstdint> // pour intptr_t

void MoveMouseRelative(int dx, int dy)
{
    INPUT input = {0};
    input.type = INPUT_MOUSE;
    input.mi.dx = dx;
    input.mi.dy = dy;
    input.mi.dwFlags = MOUSEEVENTF_MOVE;
    SendInput(1, &input, sizeof(INPUT));
}

// Example macro pattern (a few vertical steps)
const int FcarPattern[][2] = {
    {0, 2},
    {0, 2},
    {0, 2},
    {0, 2},
    {0, 2},
    {0, 2},
    {1, 3},
    {2, 3},
    {1, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 4},
    {0, 5},
    {0, 6},
    {0, 6},
    {0, 6},
    {0, 6},
    {-1, 6},
    {-1, 6},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-2, 5},
    {-1, 5},
    {-2, 5},
    {-1, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 5},
    {-2, 4},
    {-2, 4},
    {-2, 4},
    {-2, 4},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 2},
    {0, 2},
    {0, 2},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 2},
    {-1, 3},
    {0, 2},
    {0, 2},
    {-1, 3},
    {0, 2},
    {0, 3},
    {0, 3},
    {-1, 2},
    {0, 1},
    {0, 1},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 1},
    {0, 1},
    {-1, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {-1, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {-1, 0},
    {-1, 1},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 0},
    {0, 1},
    {-1, 1},
    {-1, 0},
    {0, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {-1, 0},
    {0, 1},
    {-1, 1},
    {0, 1},
    {-1, 0},
    {-1, 1},
    {-1, 1},
    {-1, 0},
    {-1, 1},
    {0, 0},
    {-1, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},

};

const int LewisGunPattern[][2] = {
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 2},
    {1, 2},
    {1, 2},
    {1, 3},
    {1, 4},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 3},
    {1, 4},
    {1, 4},
    {1, 4},
    {1, 3},
    {1, 4},
    {1, 4},
    {0, 4},
    {0, 3},
    {1, 4},
    {0, 3},
    {1, 4},
    {1, 4},
    {1, 3},
    {1, 4},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 4},
    {0, 5},
    {0, 4},
    {0, 4},
    {1, 4},
    {1, 4},
    {0, 5},
    {0, 4},
    {1, 5},
    {0, 4},
    {0, 4},
    {0, 4},
    {0, 5},
    {0, 4},
    {1, 4},
    {1, 5},
    {0, 4},
    {0, 5},
    {0, 4},
    {1, 4},
    {0, 4},
    {1, 5},
    {0, 4},
    {1, 4},
    {1, 3},
    {-1, 4},
    {-1, 3},
    {-1, 4},
    {-1, 4},
    {-2, 3},
    {-2, 3},
    {-2, 4},
    {-3, 3},
    {-4, 4},
    {-4, 3},
    {-3, 4},
    {-3, 4},
    {-2, 4},
    {-2, 4},
    {-2, 4},
    {-2, 4},
    {-2, 4},
    {-2, 3},
    {-2, 4},
    {-1, 4},
    {0, 3},
    {-1, 3},
    {-1, 4},
    {0, 4},
    {-1, 3},
    {-1, 3},
    {0, 4},
    {-1, 3},
    {-1, 4},
    {0, 4},
    {0, 3},
    {-1, 3},
    {-1, 4},
    {0, 4},
    {0, 4},
    {-1, 3},
    {0, 4},
    {-1, 3},
    {0, 4},
    {-1, 3},
    {0, 4},
    {-1, 3},
    {0, 4},
    {0, 4},
    {0, 2},
    {0, 3},
    {0, 2},
    {0, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {2, 1},
    {2, 1},
    {2, 2},
    {2, 2},
    {1, 1},
    {1, 1},
    {2, 1},
    {2, 1},
    {2, 2},
    {1, 2},
    {1, 2},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 2},
    {2, 1},
    {2, 2},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 2},
    {2, 2},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {1, 2},
    {1, 2},
    {0, 1},
    {-1, 2},
    {-1, 2},
    {0, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {0, 1},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 1},
    {-2, 2},
    {-2, 1},
    {-1, 1},
    {-2, 1},
    {-1, 1},
    {-1, 1},
    {-2, 2},
    {-2, 2},
    {-2, 1},
    {-1, 1},
    {-2, 2},
    {-1, 2},
    {-2, 1},
    {-2, 2},
    {-2, 2},
    {-1, 2},
    {-1, 2},
    {0, 1},
    {0, 1},
    {-1, 2},
    {-1, 2},
    {0, 1},
    {-1, 2},
    {0, 1},
    {0, 2},
    {-1, 2},
    {-1, 2},
    {0, 2},
    {-1, 1},
    {-1, 2},
    {-1, 2},
    {-1, 1},
    {-2, 2},
    {-2, 2},
    {-1, 1},
    {-2, 2},
    {-1, 1},
    {-2, 2},
    {-2, 2},
    {-1, 1},
    {-2, 2},
    {-1, 1},
    {-2, 2},
    {-2, 2},
    {-2, 2},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-2, 1},
    {-2, 1},
    {-1, 1},
    {-1, 1},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 0},
    {2, 0},
    {2, 0},
    {2, 0},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {2, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {0, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 0},
};

const int M60Pattern[][2] = {
    {0, 8},
    {1, 8},
    {0, 7},
    {0, 6},
    {0, 6},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 6},
    {0, 5},
    {0, 6},
    {0, 6},
    {0, 6},
    {0, 7},
    {0, 7},
    {0, 8},
    {0, 8},
    {0, 8},
    {0, 8},
    {0, 8},
    {0, 8},
    {0, 7},
    {0, 7},
    {0, 6},
    {1, 5},
    {1, 4},
    {0, 4},
    {0, 4},
    {1, 4},
    {0, 4},
    {0, 4},
    {0, 4},
    {0, 4},
    {1, 4},
    {1, 4},
    {1, 4},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 1},
    {-1, 1},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 1},
    {-1, 2},
    {-1, 2},
    {-1, 1},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {-1, 1},
    {-1, 2},
    {-1, 1},
    {-1, 2},
    {-1, 2},
    {0, 2},
    {0, 2},
    {-1, 1},
    {-1, 2},
    {0, 2},
    {0, 2},
    {-1, 1},
    {-1, 2},
    {-1, 2},
    {-1, 2},
    {0, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {0, 2},
    {0, 1},
    {0, 2},
    {1, 2},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 2},
    {0, 1},
    {0, 2},
    {0, 2},
    {0, 2},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 2},
    {0, 2},
    {0, 1},
    {0, 2},
    {0, 2},
    {1, 1},
    {1, 2},
    {1, 2},
    {1, 2},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 2},
    {1, 2},
    {1, 1},
    {2, 1},
    {2, 2},
    {1, 1},
    {1, 2},
    {2, 1},
    {1, 2},
    {1, 1},
    {1, 2},
    {1, 1},
    {0, 1},
    {0, 2},
    {0, 2},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 0},
    {0, 0},
    {-1, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {-1, 0},
    {0, 1},
    {0, 0},
    {-1, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {-1, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 0},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {1, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {1, 0},
    {1, 0},
    {1, 0},
    {1, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {1, 1},
    {1, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 0},
    {0, 1},
    {0, 0},
    {1, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {1, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 0},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {-1, 0},
    {0, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 0},
    {1, 0},
    {0, 0},
    {1, 0},
    {0, 1},
    {1, 0},
    {0, 1},
    {1, 1},
    {0, 0},
    {0, 1},
    {1, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {-1, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 1},
    {-1, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {-1, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {-1, 1},
    {-1, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {-1, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 1},
    {1, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {1, 1},
    {1, 1},
    {0, 0},
    {0, 1},
    {1, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
};

const int XP_54Pattern[][2] = {
    {-1, 7},
    {-1, 7},
    {-1, 6},
    {-1, 6},
    {-1, 6},
    {-1, 6},
    {0, 5},
    {-1, 6},
    {-1, 5},
    {0, 5},
    {0, 5},
    {-1, 6},
    {0, 5},
    {-1, 6},
    {0, 5},
    {-1, 6},
    {0, 5},
    {-1, 5},
    {0, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 6},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 6},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 6},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 6},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 4},
    {-1, 4},
    {-1, 3},
    {-1, 3},
    {-1, 2},
    {-1, 2},
    {-1, 1},
    {-1, 2},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 0},
    {0, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 0},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 0},
    {0, 1},
    {-1, 1},
    {0, 0},
    {-1, 1},
    {0, 1},
    {-1, 1},
    {-1, 1},
    {0, 0},
    {-1, 1},
    {0, 0},
    {-1, 0},
    {-1, 1},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {0, 1},
    {-1, 0},
    {-1, 0},
    {0, 1},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {-1, 0},
    {-1, 0},
    {0, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {-1, 0},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
};

const int ARN_22Pattern[][2] = {
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 4},
    {1, 5},
    {1, 4},
    {1, 4},
    {0, 4},
    {1, 5},
    {0, 4},
    {1, 4},
    {0, 4},
    {0, 5},
    {1, 4},
    {1, 5},
    {0, 4},
    {0, 4},
    {0, 5},
    {1, 4},
    {1, 4},
    {1, 4},
    {1, 5},
    {0, 4},
    {0, 4},
    {0, 4},
    {0, 5},
    {1, 4},
    {1, 4},
    {1, 5},
    {0, 4},
    {0, 4},
    {1, 5},
    {0, 4},
    {0, 4},
    {1, 5},
    {1, 4},
    {1, 4},
    {1, 4},
    {1, 5},
    {0, 4},
    {0, 4},
    {0, 4},
    {1, 4},
    {1, 5},
    {1, 4},
    {0, 4},
    {0, 5},
    {1, 4},
    {0, 4},
    {0, 5},
    {0, 4},
    {1, 5},
    {0, 4},
    {0, 5},
    {0, 4},
    {0, 4},
    {0, 5},
    {1, 5},
    {0, 4},
    {0, 4},
    {0, 5},
    {0, 4},
    {0, 5},
    {0, 5},
    {0, 4},
    {0, 4},
    {-1, 5},
    {-1, 4},
    {-1, 4},
    {-1, 5},
    {0, 4},
    {-1, 5},
    {0, 5},
    {-1, 4},
    {0, 5},
    {0, 4},
    {-1, 4},
    {0, 5},
    {-1, 4},
    {0, 5},
    {0, 4},
    {-1, 4},
    {0, 5},
    {-1, 5},
    {0, 4},
    {0, 5},
    {-1, 4},
    {0, 5},
    {0, 5},
    {-1, 4},
    {0, 5},
    {-1, 4},
    {0, 4},
    {0, 5},
    {-1, 5},
    {0, 5},
    {-1, 4},
    {0, 5},
    {-1, 5},
    {0, 4},
    {0, 5},
    {-1, 5},
    {0, 4},
    {-1, 4},
    {0, 5},
    {0, 4},
    {-1, 4},
    {0, 4},
    {0, 4},
    {0, 5},
    {-1, 4},
    {0, 4},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 0},
    {0, 0},
    {0, 0},

};

const int AK47Pattern[][2] = {
    {2, 4},
    {2, 4},
    {2, 4},
    {1, 4},
    {1, 5},
    {1, 5},
    {1, 5},
    {1, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {-1, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 3},
    {0, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-2, 3},
    {-2, 3},
    {-2, 3},
    {-2, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-2, 3},
    {-2, 3},
    {-2, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-2, 3},
    {-2, 3},
    {-2, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {-1, 3},
    {0, 2},
    {0, 2},
    {0, 2},
    {1, 3},
    {0, 3},
    {1, 2},
    {0, 3},
    {1, 3},
    {0, 2},
    {1, 3},
    {0, 3},
    {1, 3},
    {1, 2},
    {1, 2},
    {0, 2},
    {0, 2},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 2},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 2},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 2},
    {1, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 2},
    {1, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 2},
    {1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 2},
    {1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 2},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 2},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 2},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {1, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
};

const int SHAK_50Pattern[][2] = {
    {0, 4},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 3},
    {-1, 4},
    {0, 4},
    {-1, 3},
    {0, 3},
    {-1, 3},
    {0, 4},
    {0, 3},
    {-1, 3},
    {0, 4},
    {-1, 3},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 2},
    {0, 2},
    {0, 3},
    {0, 3},
    {0, 2},
    {1, 2},
    {1, 2},
    {1, 3},
    {2, 2},
    {2, 3},
    {2, 2},
    {1, 2},
    {1, 3},
    {1, 2},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 2},
    {-1, 2},
    {-1, 2},
    {-2, 3},
    {-3, 3},
    {-3, 2},
    {-2, 3},
    {-2, 2},
    {-1, 2},
    {-1, 2},
    {0, 2},
    {0, 3},
    {0, 3},
    {0, 2},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 4},
    {0, 3},
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 3},

};

const int M11Pattern[][2] = {
    {0, 3},
    {0, 4},
    {0, 4},
    {0, 5},
    {0, 5},
    {0, 6},
    {1, 5},
    {1, 5},
    {1, 6},
    {1, 5},
    {1, 4},
    {1, 4},
    {1, 5},
    {2, 5},
    {2, 4},
    {2, 5},
    {2, 5},
    {1, 5},
    {1, 6},
    {1, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 5},
    {0, 4},
    {0, 3},
    {0, 2},
    {0, 2},
    {0, 1},
    {0, 2},
    {0, 1},
    {0, 2},
    {0, 1},
    {0, 1},
    {-3, 2},
    {-3, 2},
    {-3, 1},
    {-3, 2},
    {-3, 2},
    {-3, 1},
    {-3, 2},
    {-3, 2},
    {-3, 2},
    {-3, 1},
    {-3, 2},
    {-2, 2},
    {-2, 2},
    {-1, 1},
    {0, 1},
    {0, 2},
    {1, 2},
    {0, 1},
    {0, 2},
    {1, 2},
    {0, 1},
    {0, 2},
    {1, 2},
    {2, 2},
    {3, 1},
    {3, 1},
    {3, 1},
    {4, 1},
    {4, 1},
    {4, 2},
    {3, 1},
    {3, 2},
    {3, 1},
    {3, 1},
    {3, 1},
    {3, 1},
    {2, 1},
    {2, 1},
    {1, 1},
    {0, 2},
    {1, 2},
    {0, 1},
    {0, 1},
    {1, 1},
    {0, 1},
    {0, 2},
    {0, 1},
    {0, 1},
    {0, 1},
    {-1, 1},
    {-2, 1},
    {-2, 1},
    {-3, 2},
    {-3, 1},
    {-3, 1},
    {-3, 2},
    {-3, 1},
    {-4, 1},
    {-4, 1},
    {-3, 1},
    {-3, 1},
    {-3, 1},
    {-3, 1},
    {-3, 1},
    {-2, 1},
    {-1, 1},
    {-1, 1},
    {-1, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {1, 1},
    {0, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {1, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {1, 1},
    {1, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 1},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},
    {0, 0},

};



// Mouse pattern structure
struct MousePattern {
    const char* name;
    const int (*pattern)[2];
    int length;
    int delay;
};



// Declare your pattern arrays (example placeholders)
extern const int AK47Pattern[][2], LewisGunPattern[][2], FcarPattern[][2],
    M60Pattern[][2], XP_54Pattern[][2], ARN_22Pattern[][2],
    SHAK_50Pattern[][2], M11Pattern[][2];


// int main() {
//     std::cout << "Running...\n";
//     std::cout << "➡️ Hold LEFT mouse button to run macro pattern\n\n";

//     // Choose pattern dynamically (change index to select different weapon)
//     int selectedPatternIndex = 2; // AK47
//     const MousePattern& activePattern = patterns[selectedPatternIndex];

//     std::cout << "Active pattern: " << activePattern.name << "\n";

//     while (true) {
//         if (GetAsyncKeyState(VK_LBUTTON) & 0x8000) {
//             for (int i = 0; i < activePattern.length; ++i) {
//                 if (!(GetAsyncKeyState(VK_LBUTTON) & 0x8000))
//                     break;

//                 MoveMouseRelativeFractional(
//                     activePattern.pattern[i][0] * SENSITIVITY_SCALE,
//                     activePattern.pattern[i][1] * SENSITIVITY_SCALE
//                 );

//                 Sleep(activePattern.delay);
//             }
//         }

//         Sleep(1); // Reduce CPU usage
//     }

//     return 0;
// }

// Conversion char* → wstring

// Sensitivity and leftover precision for fractional mouse movement
const double SENSITIVITY_SCALE = 52.0 / 84.0;
double leftoverX = 0.0, leftoverY = 0.0;

// Mouse movement function
void MoveMouseRelativeFractional(double dx, double dy) {
    dx += leftoverX;
    dy += leftoverY;

    int moveX = static_cast<int>(floor(dx));
    int moveY = static_cast<int>(floor(dy));

    leftoverX = dx - moveX;
    leftoverY = dy - moveY;

    if (moveX != 0 || moveY != 0) {
        INPUT input = {0};
        input.type = INPUT_MOUSE;
        input.mi.dx = moveX;
        input.mi.dy = moveY;
        input.mi.dwFlags = MOUSEEVENTF_MOVE;
        SendInput(1, &input, sizeof(INPUT));
    }
}

// Dummy example patterns
// Declare your pattern arrays (example placeholders)
extern const int AK47Pattern[][2], LewisGunPattern[][2], FcarPattern[][2],
    M60Pattern[][2], XP_54Pattern[][2], ARN_22Pattern[][2],
    SHAK_50Pattern[][2], M11Pattern[][2];

const MousePattern patterns[] = {
    {"AK47", AK47Pattern, sizeof(AK47Pattern) / sizeof(AK47Pattern[0]), 17},                 // 0
    {"LewisGun", LewisGunPattern, sizeof(LewisGunPattern) / sizeof(LewisGunPattern[0]), 17}, // 1
    {"Fcar", FcarPattern, sizeof(FcarPattern) / sizeof(FcarPattern[0]), 18},                 // 2
    {"M60", M60Pattern, sizeof(M60Pattern) / sizeof(M60Pattern[0]), 17},                     // 3
    {"XP_54", XP_54Pattern, sizeof(XP_54Pattern) / sizeof(XP_54Pattern[0]), 17},             // 4
    {"ARN_22", ARN_22Pattern, sizeof(ARN_22Pattern) / sizeof(ARN_22Pattern[0]), 18},         // 5
    {"SHAK_50", SHAK_50Pattern, sizeof(SHAK_50Pattern) / sizeof(SHAK_50Pattern[0]), 17},     // 6
    {"M11", M11Pattern, sizeof(M11Pattern) / sizeof(M11Pattern[0]), 17}                      // 7
};

// Globals
int selectedPatternIndex = 0;
bool macroRunning = false;
HWND hwndStartBtn;

// Convert char* to std::wstring
std::wstring toWide(const char* str) {
    int size_needed = MultiByteToWideChar(CP_UTF8, 0, str, -1, nullptr, 0);
    std::wstring wstr(size_needed, 0);
    MultiByteToWideChar(CP_UTF8, 0, str, -1, &wstr[0], size_needed);
    return wstr;
}

// Threaded macro runner
void RunMacroLoop() {
    while (true) {
        if (macroRunning && (GetAsyncKeyState(VK_LBUTTON) & 0x8000)) {
            const MousePattern& pattern = patterns[selectedPatternIndex];
            for (int i = 0; i < pattern.length; ++i) {
                if (!(GetAsyncKeyState(VK_LBUTTON) & 0x8000)) break;
                MoveMouseRelativeFractional(
                    pattern.pattern[i][0] * SENSITIVITY_SCALE,
                    pattern.pattern[i][1] * SENSITIVITY_SCALE);
                Sleep(pattern.delay);
            }
        }
        Sleep(1);
    }
}

// Message handler
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
        case WM_COMMAND: {
            int id = LOWORD(wParam);
            if (id == 200) macroRunning = true;
            else if (id == 201) macroRunning = false;
            else if (id >= 100 && id < 100 + sizeof(patterns) / sizeof(MousePattern))
                selectedPatternIndex = id - 100;
            break;
        }
        case WM_CLOSE:
            PostQuitMessage(0);
            break;
        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

// Entry point

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"MouseMacroWindow";

    // Utilise WNDCLASSW pour Unicode
    WNDCLASSW wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    RegisterClassW(&wc);

    HWND hwnd = CreateWindowExW(
        0, CLASS_NAME, L"Mouse Macro Selector",
        WS_OVERLAPPEDWINDOW ^ WS_THICKFRAME ^ WS_MAXIMIZEBOX,
        CW_USEDEFAULT, CW_USEDEFAULT,
        300, 420, // hauteur suffisante pour 8 boutons + 2 commandes
        NULL, NULL, hInstance, NULL);

    // Création des boutons radio
    for (int i = 0; i < sizeof(patterns) / sizeof(MousePattern); ++i) {
        std::wstring wname = toWide(patterns[i].name);
        CreateWindowW(
            L"BUTTON", wname.c_str(),
            WS_VISIBLE | WS_CHILD | BS_AUTORADIOBUTTON | (i == 0 ? WS_GROUP : 0),
            20, 20 + i * 30, 200, 25,
            hwnd, (HMENU)(intptr_t)(100 + i), hInstance, NULL);
    }

    // Boutons Start et Stop sous les radios
    int yStart = 20 + (sizeof(patterns) / sizeof(MousePattern)) * 30 + 10;
    hwndStartBtn = CreateWindowW(
        L"BUTTON", L"\u25B6 Start Macro", // ▶
        WS_VISIBLE | WS_CHILD,
        20, yStart, 120, 30,
        hwnd, (HMENU)200, hInstance, NULL);

    CreateWindowW(
        L"BUTTON", L"\u23F9 Stop Macro",  // ⏹
        WS_VISIBLE | WS_CHILD,
        150, yStart, 120, 30,
        hwnd, (HMENU)201, hInstance, NULL);

    ShowWindow(hwnd, nCmdShow);

    // Lancer le thread de macro
    std::thread macroThread(RunMacroLoop);
    macroThread.detach();

    // Boucle principale
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}







